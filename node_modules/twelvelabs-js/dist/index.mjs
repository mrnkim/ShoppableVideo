import { APIClient } from "./core.mjs";
import * as Resources from "./resources/index.mjs";
import { BASE_URL, LATEST_API_VERSION } from "./constants.mjs";
import * as Models from "./models/index.mjs";
import { convertKeysToSnakeCase, removeUndefinedValues, trackStream } from "./util.mjs";
export class TwelveLabs extends APIClient {
    constructor({ apiKey, version = LATEST_API_VERSION }) {
        if (version !== LATEST_API_VERSION) {
            throw new Error(`[Warning] You manually set the API version to ${version}, but this SDK version is not fully compatible with current API version, please use version 0.3.x or earlier`);
        }
        if (!apiKey) {
            throw new Error('Provide `apiKey` to initialize a client. You can see the API Key in the Dashboard page: https://dashboard.playground.io');
        }
        const customBaseUrl = process.env.TWELVELABS_BASE_URL;
        const baseUrl = `${customBaseUrl || BASE_URL}/${version}/`;
        super({ baseUrl, apiKey });
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.index = new Resources.Index(this);
        this.task = new Resources.Task(this);
        this.search = new Resources.Search(this);
        this._generate = new Resources.Generate(this);
        this.embed = new Resources.Embed(this);
    }
    /**
     * @deprecated The `generate` property is deprecated. Use the flattened methods directly on the client: `client.summarize()`, `client.gist()`, `client.analyze()`, `client.analyzeStream()` instead.
     */
    get generate() {
        console.warn('[Deprecation Warning] The `generate` property is deprecated. Use the flattened methods directly on the client: `client.summarize()`, `client.gist()`, `client.analyze()`, `client.analyzeStream()` instead.');
        return this._generate;
    }
    async summarize(videoId, type, prompt, temperature, options = {}) {
        const _body = convertKeysToSnakeCase({
            videoId,
            type,
            prompt,
            temperature,
        });
        const res = await this._post('summarize', removeUndefinedValues(_body), options);
        return res;
    }
    async gist(videoId, types, options = {}) {
        const _body = convertKeysToSnakeCase({
            videoId,
            types,
        });
        const res = await this._post('gist', _body, options);
        return res;
    }
    async analyze(videoId, prompt, temperature, options = {}) {
        const _body = convertKeysToSnakeCase({
            videoId,
            prompt,
            temperature,
            stream: false,
        });
        const res = await this._post('analyze', removeUndefinedValues(_body), options);
        return res;
    }
    async analyzeStream({ videoId, prompt, temperature }, options = {}) {
        const _body = convertKeysToSnakeCase({
            videoId,
            prompt,
            temperature,
            stream: true,
        });
        const res = await this._post('analyze', removeUndefinedValues(_body), options);
        return new Models.GenerateTextStreamResult(trackStream(res));
    }
}
export { Index, IndexListWithPagination, Video, VideoListWithPagination, Task, TaskListWithPagination, SearchResult, GenerateTextStreamResult, EmbeddingsTask, EmbeddingsTaskListWithPagination, EmbeddingsTaskStatus, CreateEmbeddingsResult, Embedding, SegmentEmbedding, } from "./models/index.mjs";
export { TwelveLabsError, APIConnectionError, APITimeoutError, BadRequestError, ConflictError, ForbiddenError, MethodNotAllowedError, NotFoundError, TooManyRequestsError, UnauthorizedError, InternalServerError, } from "./error.mjs";
//# sourceMappingURL=index.mjs.map