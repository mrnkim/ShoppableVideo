import FormData from 'form-data';
import * as Models from "../../models/index.mjs";
import { APIResource } from "../../resource.mjs";
import { attachFormFile } from "../../util.mjs";
export class EmbedTask extends APIResource {
    async retrieve(id, options = {}) {
        const res = await this._get(`embed/tasks/${id}`, {}, options);
        return new Models.EmbeddingsTask(this, res);
    }
    async create(engineName, { file, url, startOffsetSec, endOffsetSec, clipLength, scopes }, options = {}) {
        if (!file && !url) {
            throw new Error('Either video file or url must be provided');
        }
        const formData = new FormData();
        formData.append('engine_name', engineName);
        if (url)
            formData.append('video_url', url);
        if (startOffsetSec)
            formData.append('video_start_offset_sec', startOffsetSec);
        if (endOffsetSec)
            formData.append('video_end_offset_sec', endOffsetSec);
        if (clipLength)
            formData.append('video_clip_length', clipLength);
        try {
            if (file)
                attachFormFile(formData, 'video_file', file);
        }
        catch (err) {
            throw err;
        }
        const { id } = await this._post('embed/tasks', formData, options);
        const task = await this.retrieve(id);
        return task;
    }
    async createBulk(engineName, videos, options = {}) {
        const tasks = [];
        for (const videoParams of videos) {
            try {
                const task = await this.create(engineName, videoParams, options);
                tasks.push(task);
            }
            catch (e) {
                console.error(`Error creating task with video: ${e}`);
            }
        }
        return tasks;
    }
    async status(taskId, options = {}) {
        const res = await this._get(`embed/tasks/${taskId}/status`, {}, options);
        return new Models.EmbeddingsTaskStatus(res);
    }
}
export class Embed extends APIResource {
    constructor(client) {
        super(client);
        this.task = new EmbedTask(client);
    }
    async create({ engineName, text, textTruncate }, options = {}) {
        const formData = new FormData();
        formData.append('engine_name', engineName);
        formData.append('text', text);
        if (textTruncate)
            formData.append('text_truncate', textTruncate);
        const res = await this._post('embed', formData, options);
        return new Models.CreateEmbeddingsResult(res);
    }
}
//# sourceMappingURL=index.mjs.map