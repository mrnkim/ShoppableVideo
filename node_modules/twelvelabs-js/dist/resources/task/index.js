"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Task = void 0;
const form_data_1 = __importDefault(require("form-data"));
const Models = __importStar(require("../../models/index.js"));
const util_1 = require("../../util.js");
const resource_1 = require("../../resource.js");
class Task extends resource_1.APIResource {
    async retrieve(id, options = {}) {
        const res = await this._get(`tasks/${id}`, {}, options);
        return new Models.Task(this, res);
    }
    async list({ id, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = (0, util_1.convertKeysToSnakeCase)({
            ...restParams,
            _id: id,
        });
        (0, util_1.handleComparisonParams)(_params, 'createdAt', createdAt);
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return res.data.map((v) => new Models.Task(this, v));
    }
    async listPagination({ id, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = { id, ...restParams };
        const _params = (0, util_1.convertKeysToSnakeCase)({
            ...restParams,
            _id: id,
        });
        (0, util_1.handleComparisonParams)(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', (0, util_1.removeUndefinedValues)(_params), options);
        return new Models.TaskListWithPagination(this, originParams, res.data, res.pageInfo);
    }
    async create(body, options = {}) {
        if (!body.file && !body.url) {
            throw new Error('Either file or url must be provided');
        }
        const formData = new form_data_1.default();
        formData.append('index_id', body.indexId);
        if (body.url)
            formData.append('video_url', body.url);
        if (body.transcriptionUrl)
            formData.append('transcription_url', body.transcriptionUrl);
        if (body.language)
            formData.append('language', body.language);
        if (body.disableVideoStream)
            formData.append('disable_video_stream', String(body.disableVideoStream));
        try {
            if (body.file)
                (0, util_1.attachFormFile)(formData, 'video_file', body.file);
            if (body.transcriptionFile) {
                (0, util_1.attachFormFile)(formData, 'transcription_file', body.transcriptionFile);
                formData.append('provide_transcription', true);
            }
        }
        catch (err) {
            throw err;
        }
        const res = await this._post('tasks', formData, options);
        return await this.retrieve(res.id);
    }
    async createBulk(indexId, { files, urls, language, disableVideoStream, }, options = {}) {
        if (!files && !urls) {
            throw new Error('Either files or urls must be provided');
        }
        const tasks = [];
        if (files) {
            for (const file of files) {
                try {
                    const task = await this.create({ indexId, file, language, disableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing file ${file}:`, e);
                }
            }
        }
        if (urls) {
            for (const url of urls) {
                try {
                    const task = await this.create({ indexId, url, language, disableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing url ${url}:`, e);
                }
            }
        }
        return tasks;
    }
    async delete(id, options = {}) {
        await this._delete(`tasks/${id}`, options);
    }
    async status(indexId, options = {}) {
        const params = { index_id: indexId };
        const res = await this._get(`tasks/status`, (0, util_1.convertKeysToSnakeCase)(params), options);
        return res;
    }
    async transfer(file, options = {}) {
        const formData = new form_data_1.default();
        formData.append('file', file);
        await this._post(`tasks/transfers`, formData, options);
    }
    async externalProvider(indexId, url, options = {}) {
        const body = { index_id: indexId, url };
        const res = await this._post(`tasks/external-provider`, (0, util_1.convertKeysToSnakeCase)(body), options);
        return await this.retrieve(res.id);
    }
}
exports.Task = Task;
//# sourceMappingURL=index.js.map