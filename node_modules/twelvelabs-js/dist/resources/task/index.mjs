import FormData from 'form-data';
import * as Models from "../../models/index.mjs";
import { attachFormFile, convertKeysToSnakeCase, handleComparisonParams, removeUndefinedValues, } from "../../util.mjs";
import { APIResource } from "../../resource.mjs";
export class Task extends APIResource {
    async retrieve(id, options = {}) {
        const res = await this._get(`tasks/${id}`, {}, options);
        return new Models.Task(this, res);
    }
    async list({ id, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
        });
        handleComparisonParams(_params, 'createdAt', createdAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', removeUndefinedValues(_params), options);
        return res.data.map((v) => new Models.Task(this, v));
    }
    async listPagination({ id, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = { id, ...restParams };
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
        });
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get('tasks', removeUndefinedValues(_params), options);
        return new Models.TaskListWithPagination(this, originParams, res.data, res.pageInfo);
    }
    async create(body, options = {}) {
        if (!body.file && !body.url) {
            throw new Error('Either file or url must be provided');
        }
        const formData = new FormData();
        formData.append('index_id', body.indexId);
        if (body.url)
            formData.append('video_url', body.url);
        if (body.transcriptionUrl)
            formData.append('transcription_url', body.transcriptionUrl);
        if (body.language)
            formData.append('language', body.language);
        if (body.disableVideoStream)
            formData.append('disable_video_stream', String(body.disableVideoStream));
        try {
            if (body.file)
                attachFormFile(formData, 'video_file', body.file);
            if (body.transcriptionFile) {
                attachFormFile(formData, 'transcription_file', body.transcriptionFile);
                formData.append('provide_transcription', true);
            }
        }
        catch (err) {
            throw err;
        }
        const res = await this._post('tasks', formData, options);
        return await this.retrieve(res.id);
    }
    async createBulk(indexId, { files, urls, language, disableVideoStream, }, options = {}) {
        if (!files && !urls) {
            throw new Error('Either files or urls must be provided');
        }
        const tasks = [];
        if (files) {
            for (const file of files) {
                try {
                    const task = await this.create({ indexId, file, language, disableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing file ${file}:`, e);
                }
            }
        }
        if (urls) {
            for (const url of urls) {
                try {
                    const task = await this.create({ indexId, url, language, disableVideoStream }, options);
                    tasks.push(task);
                }
                catch (e) {
                    console.error(`Error processing url ${url}:`, e);
                }
            }
        }
        return tasks;
    }
    async delete(id, options = {}) {
        await this._delete(`tasks/${id}`, options);
    }
    async status(indexId, options = {}) {
        const params = { index_id: indexId };
        const res = await this._get(`tasks/status`, convertKeysToSnakeCase(params), options);
        return res;
    }
    async transfer(file, options = {}) {
        const formData = new FormData();
        formData.append('file', file);
        await this._post(`tasks/transfers`, formData, options);
    }
    async externalProvider(indexId, url, options = {}) {
        const body = { index_id: indexId, url };
        const res = await this._post(`tasks/external-provider`, convertKeysToSnakeCase(body), options);
        return await this.retrieve(res.id);
    }
}
//# sourceMappingURL=index.mjs.map