/// <reference types="node" />
/// <reference types="node" />
import { RequestOptions } from '../../core';
import * as Models from '../../models';
import { CreateTaskParams, ListTaskParams } from './interfaces';
import { APIResource } from '../../resource';
export declare class Task extends APIResource {
    retrieve(id: string, options?: RequestOptions): Promise<Models.Task>;
    list({ id, createdAt, updatedAt, ...restParams }?: ListTaskParams, options?: RequestOptions): Promise<Models.Task[]>;
    listPagination({ id, createdAt, updatedAt, ...restParams }?: ListTaskParams, options?: RequestOptions): Promise<Models.TaskListWithPagination>;
    create(body: CreateTaskParams, options?: RequestOptions): Promise<Models.Task>;
    createBulk(indexId: string, { files, urls, language, disableVideoStream, }: {
        files?: (string | Buffer | null)[];
        urls?: string[];
        language?: string;
        disableVideoStream?: boolean;
    }, options?: RequestOptions): Promise<Models.Task[]>;
    delete(id: string, options?: RequestOptions): Promise<void>;
    status(indexId: string, options?: RequestOptions): Promise<Models.TaskStatus>;
    transfer(file: Buffer | NodeJS.ReadableStream, options?: RequestOptions): Promise<void>;
    externalProvider(indexId: string, url: string, options?: RequestOptions): Promise<Models.Task>;
}
//# sourceMappingURL=index.d.ts.map