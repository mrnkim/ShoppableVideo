import { RequestOptions } from '../../core';
import * as Models from '../../models';
import { APIResource } from '../../resource';
import { ListVideoParams, UpdateVideoParams, VideoFilterOptions } from './interfaces';
export declare class Video extends APIResource {
    retrieve(indexId: string, id: string, options?: RequestOptions): Promise<Models.Video>;
    list(indexId: string, { id, size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams }?: ListVideoParams, options?: RequestOptions): Promise<Models.Video[]>;
    listPagination(indexId: string, { id, size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams }?: ListVideoParams, options?: RequestOptions): Promise<Models.VideoListWithPagination>;
    update(indexId: string, id: string, { title, metadata }: UpdateVideoParams, options?: RequestOptions): Promise<void>;
    delete(indexId: string, id: string, options?: RequestOptions): Promise<void>;
    transcription(indexId: string, id: string, filter?: VideoFilterOptions, options?: RequestOptions): Promise<Models.VideoValue[]>;
    textInVideo(indexId: string, id: string, filter?: VideoFilterOptions, options?: RequestOptions): Promise<Models.VideoValue[]>;
    logo(indexId: string, id: string, filter?: VideoFilterOptions, options?: RequestOptions): Promise<Models.VideoValue[]>;
    thumbnail(indexId: string, id: string, time?: number, options?: RequestOptions): Promise<string>;
}
//# sourceMappingURL=index.d.ts.map