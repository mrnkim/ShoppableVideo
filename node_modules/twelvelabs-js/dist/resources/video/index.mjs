import * as Models from "../../models/index.mjs";
import { APIResource } from "../../resource.mjs";
import { convertKeysToSnakeCase, handleComparisonParams, removeUndefinedValues } from "../../util.mjs";
export class Video extends APIResource {
    async retrieve(indexId, id, { embeddingOption } = {}, options = {}) {
        const path = `indexes/${indexId}/videos/${id}`;
        const params = embeddingOption?.length ? { embedding_option: embeddingOption } : undefined;
        const res = await this._get(path, params, { ...options, skipCamelKeys: ['user_metadata'] });
        return new Models.Video(this, indexId, res);
    }
    async list(indexId, { size, width, height, duration, fps, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const _params = convertKeysToSnakeCase(restParams);
        handleComparisonParams(_params, 'size', size);
        handleComparisonParams(_params, 'width', width);
        handleComparisonParams(_params, 'height', height);
        handleComparisonParams(_params, 'duration', duration);
        handleComparisonParams(_params, 'fps', fps);
        handleComparisonParams(_params, 'created_at', createdAt);
        handleComparisonParams(_params, 'updated_at', updatedAt);
        const res = await this._get(`indexes/${indexId}/videos`, removeUndefinedValues(_params), { ...options, skipCamelKeys: ['user_metadata'] });
        return res.data.map((v) => new Models.Video(this, indexId, v));
    }
    async listPagination(indexId, { size, width, height, duration, fps, createdAt, updatedAt, ...restParams } = {}, options = {}) {
        const originParams = {
            size,
            width,
            height,
            duration,
            fps,
            createdAt,
            updatedAt,
            ...restParams,
        };
        const _params = convertKeysToSnakeCase(restParams);
        handleComparisonParams(_params, 'size', size);
        handleComparisonParams(_params, 'width', width);
        handleComparisonParams(_params, 'height', height);
        handleComparisonParams(_params, 'duration', duration);
        handleComparisonParams(_params, 'fps', fps);
        handleComparisonParams(_params, 'created_at', createdAt);
        handleComparisonParams(_params, 'updated_at', updatedAt);
        const res = await this._get(`indexes/${indexId}/videos`, removeUndefinedValues(_params), { ...options, skipCamelKeys: ['user_metadata'] });
        return new Models.VideoListWithPagination(this, originParams, indexId, res.data, res.pageInfo);
    }
    async update(indexId, id, { userMetadata }, options = {}) {
        await this._put(`indexes/${indexId}/videos/${id}`, removeUndefinedValues({ user_metadata: userMetadata }), options);
    }
    async delete(indexId, id, options = {}) {
        await this._delete(`indexes/${indexId}/videos/${id}`, options);
    }
}
//# sourceMappingURL=index.mjs.map