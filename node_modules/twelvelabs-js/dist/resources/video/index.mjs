import * as Models from "../../models/index.mjs";
import { APIResource } from "../../resource.mjs";
import { convertKeysToSnakeCase, handleComparisonParams, removeUndefinedValues } from "../../util.mjs";
export class Video extends APIResource {
    async retrieve(indexId, id, options = {}) {
        const res = await this._get(`indexes/${indexId}/videos/${id}`, {}, { ...options, skipCamelKeys: ['metadata'] });
        return new Models.Video(this, indexId, res);
    }
    async list(indexId, { id, size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams } = {}, options = {}) {
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
        });
        handleComparisonParams(_params, 'size', size);
        handleComparisonParams(_params, 'width', width);
        handleComparisonParams(_params, 'height', height);
        handleComparisonParams(_params, 'duration', duration);
        handleComparisonParams(_params, 'fps', fps);
        handleComparisonParams(_params, 'createdAt', createdAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get(`indexes/${indexId}/videos`, removeUndefinedValues(_params), { ...options, skipCamelKeys: ['metadata'] });
        return res.data.map((v) => new Models.Video(this, indexId, v));
    }
    async listPagination(indexId, { id, size, width, height, duration, fps, createdAt, updatedAt, indexedAt, ...restParams } = {}, options = {}) {
        const originParams = { id, ...restParams };
        const _params = convertKeysToSnakeCase({
            ...restParams,
            _id: id,
        });
        handleComparisonParams(_params, 'size', size);
        handleComparisonParams(_params, 'width', width);
        handleComparisonParams(_params, 'height', height);
        handleComparisonParams(_params, 'duration', duration);
        handleComparisonParams(_params, 'fps', fps);
        handleComparisonParams(_params, 'createdAt', createdAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        handleComparisonParams(_params, 'updatedAt', updatedAt);
        const res = await this._get(`indexes/${indexId}/videos`, removeUndefinedValues(_params), { ...options, skipCamelKeys: ['metadata'] });
        return new Models.VideoListWithPagination(this, originParams, indexId, res.data, res.pageInfo);
    }
    async update(indexId, id, { title, metadata }, options = {}) {
        await this._put(`indexes/${indexId}/videos/${id}`, removeUndefinedValues(convertKeysToSnakeCase({ videoTitle: title, metadata })), options);
    }
    async delete(indexId, id, options = {}) {
        await this._delete(`indexes/${indexId}/videos/${id}`, options);
    }
    async transcription(indexId, id, filter = {}, options = {}) {
        const res = await this._get(`indexes/${indexId}/videos/${id}/transcription`, removeUndefinedValues(filter), options);
        return res.data || [];
    }
    async textInVideo(indexId, id, filter = {}, options = {}) {
        const res = await this._get(`indexes/${indexId}/videos/${id}/text-in-video`, removeUndefinedValues(filter), options);
        return res.data || [];
    }
    async logo(indexId, id, filter = {}, options = {}) {
        const res = await this._get(`indexes/${indexId}/videos/${id}/logo`, removeUndefinedValues(filter), options);
        return res.data || [];
    }
    async thumbnail(indexId, id, time, options = {}) {
        const res = await this._get(`indexes/${indexId}/videos/${id}/thumbnail`, removeUndefinedValues({ time }), options);
        return res.thumbnail;
    }
}
//# sourceMappingURL=index.mjs.map