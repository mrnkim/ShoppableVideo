export interface GenerateUsage {
    outputTokens: number;
}
export interface GenerateOpenEndedTextResult {
    id: string;
    data: string;
    usage?: GenerateUsage;
}
export interface GenerateSummarizeChapterResult {
    chapterNumber: number;
    start: number;
    end: number;
    chapterTitle: string;
    chapterSummary: string;
}
export interface GenerateSummarizeHighlightResult {
    start: number;
    end: number;
    highlight: string;
    highlightSummary: string;
}
export interface GenerateSummarizeResult {
    id: string;
    summary?: string;
    chapters?: GenerateSummarizeChapterResult[];
    highlights?: GenerateSummarizeHighlightResult[];
    usage?: GenerateUsage;
}
export interface GenerateGistResult {
    id: string;
    title?: string;
    topics?: string[];
    hashtags?: string[];
    usage?: GenerateUsage;
}
export declare class GenerateTextStreamResult {
    id: string;
    texts: string[];
    aggregatedText: string;
    private stream;
    constructor(stream: ReadableStream);
    [Symbol.asyncIterator](): AsyncGenerator<any, void, unknown>;
}
//# sourceMappingURL=index.d.ts.map