import { RequestOptions } from '../../core';
import * as Resources from '../../resources';
export interface Embedding {
    float: number[];
}
export interface CreateEmbeddingsResultResponse {
    engineName: string;
    textEmbedding: Embedding;
}
export declare class CreateEmbeddingsResult {
    engineName: string;
    textEmbedding: Embedding;
    constructor(data: CreateEmbeddingsResultResponse);
}
export interface EmbeddingsTaskStatusResponse {
    id: string;
    engineName: string;
    status: string;
}
export declare class EmbeddingsTaskStatus {
    id: string;
    engineName: string;
    status: string;
    constructor(data: EmbeddingsTaskStatusResponse);
}
export interface VideoEmbedding {
    startOffsetSec: number;
    endOffsetSec: number;
    embeddingScope: string;
    embedding: Embedding;
}
export interface EmbeddingsTaskResponse {
    id: string;
    engineName: string;
    status: string;
    videoEmbeddings?: VideoEmbedding[];
}
export declare class EmbeddingsTask {
    private readonly _resource;
    id: string;
    engineName: string;
    status: string;
    videoEmbeddings?: VideoEmbedding[];
    constructor(resource: Resources.EmbedTask, data: EmbeddingsTaskResponse);
    retrieve(options?: RequestOptions): Promise<EmbeddingsTask>;
    getStatus(options?: RequestOptions): Promise<string>;
    waitForDone(sleepInterval?: number, callback?: (task: EmbeddingsTask) => void): Promise<string>;
    private sleep;
}
//# sourceMappingURL=index.d.ts.map