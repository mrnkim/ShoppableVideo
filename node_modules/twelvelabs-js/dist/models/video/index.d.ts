import { RequestOptions } from '../../core';
import * as Resources from '../../resources';
import { GenerateGistResult, GenerateOpenEndedTextResult } from '../generate';
import { PageInfo } from '../interfaces';
export interface VideoResponse {
    id: string;
    metadata: VideoMetadata;
    hls?: VideoHLS;
    source?: VideoSource;
    indexedAt?: string;
    createdAt: string;
    updatedAt?: string;
}
export declare class Video {
    private readonly _resource;
    private readonly _indexId;
    id: string;
    metadata: VideoMetadata & Record<string, any>;
    hls?: VideoHLS;
    source?: VideoSource;
    indexedAt?: string;
    createdAt: string;
    updatedAt?: string;
    constructor(resource: Resources.Video, indexId: string, data: VideoResponse);
    update(params: Resources.UpdateVideoParams, options?: RequestOptions): Promise<void>;
    delete(options?: RequestOptions): Promise<void>;
    transcription(filter?: Resources.VideoFilterOptions, options?: RequestOptions): Promise<VideoValue[]>;
    textInVideo(filter?: Resources.VideoFilterOptions, options?: RequestOptions): Promise<VideoValue[]>;
    logo(filter?: Resources.VideoFilterOptions, options?: RequestOptions): Promise<VideoValue[]>;
    thumbnail(time?: number, options?: RequestOptions): Promise<string>;
    generateGist(types: Resources.GenerateGistType[], options?: RequestOptions): Promise<GenerateGistResult>;
    generateSummarize(type: Resources.GenerateSummarizeType, prompt?: string, temperature?: number, options?: RequestOptions): Promise<GenerateGistResult>;
    generateText(prompt: string, temperature?: number, options?: RequestOptions): Promise<GenerateOpenEndedTextResult>;
}
export declare class VideoListWithPagination {
    private readonly _resource;
    private readonly _originParams;
    private readonly _indexId;
    data: Video[];
    pageInfo: PageInfo;
    constructor(resource: Resources.Video, originParams: Resources.ListVideoParams, indexId: string, data: VideoResponse[], pageInfo: PageInfo);
    next(): Promise<Video[] | null>;
}
interface VideoMetadata {
    filename: string;
    duration: number;
    fps: number;
    width: number;
    height: number;
    size: number;
}
export interface VideoHLS {
    videoUrl?: string;
    thumbnailUrls?: string[];
    status?: string;
    updatedAt: string;
}
export interface VideoValue {
    start: number;
    end: number;
    value: string;
}
export interface VideoSource {
    type: string;
    name: string;
    url?: string;
}
export {};
//# sourceMappingURL=index.d.ts.map