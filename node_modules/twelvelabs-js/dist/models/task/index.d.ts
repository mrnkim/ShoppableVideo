import { RequestOptions } from '../../core';
import * as Resources from '../../resources';
import { PageInfo } from '../interfaces';
export interface TaskResponse {
    id: string;
    indexId: string;
    videoId?: string[];
    estimatedTime?: string;
    status: string;
    metadata: Record<string, any>;
    process?: Record<string, any>;
    createdAt: string;
    updatedAt?: string;
}
export declare class Task {
    private readonly _resource;
    id: string;
    indexId: string;
    videoId?: string[];
    estimatedTime?: string;
    status: string;
    metadata: Record<string, any>;
    process?: TaskProcess;
    hls?: TaskHLS;
    createdAt: string;
    updatedAt?: string;
    constructor(resource: Resources.Task, data: TaskResponse);
    retrieve(options?: RequestOptions): Promise<Task>;
    delete(options?: RequestOptions): Promise<void>;
    waitForDone(sleepInterval?: number, callback?: (task: Task) => void): Promise<Task>;
    private sleep;
}
export declare class TaskListWithPagination {
    private readonly _resource;
    private readonly _originParams;
    data: Task[];
    pageInfo: PageInfo;
    constructor(resource: Resources.Task, originParams: Resources.ListTaskParams, data: TaskResponse[], pageInfo: PageInfo);
    next(): Promise<Task[] | null>;
}
export interface TaskStatus {
    indexId: string;
    ready: number;
    validating: number;
    pending: number;
    failed: number;
    totalResult: number;
}
export interface TaskHLS {
    videoUrl?: string;
    thumbnailUrls?: string[];
    status?: string;
    updatedAt: string;
}
export interface TaskProcess {
    percentage?: number;
    remainSeconds?: number;
}
//# sourceMappingURL=index.d.ts.map